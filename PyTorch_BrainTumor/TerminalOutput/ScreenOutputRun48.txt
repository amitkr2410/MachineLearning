/content/drive/MyDrive/PyTorch_BrainTumor/params.yaml


######### Start initializing parameters ##### 
dict_keys(['parent_dir', 'model_name', 'num_classes', 'seed', 'test_size', 'train_folder', 'test_folder', 'predict_folder', 'learning_rate', 'weight_decay', 'batch_size', 'num_epochs', 'save_model_flag', 'save_model_dir', 'save_model_filename', 'save_parameters_file', 'train_accuracy', 'test_val_loss', 'test_accuracy'])
dict_values([PosixPath('.'), 'cnn_4layers_custom', 2, 1, 0.2, PosixPath('data/train'), PosixPath('data/test'), PosixPath('data/predict'), 0.002, 0.2, 100, 2, 'yes', 'final_model', 'cnn_4layers_custom.pth', 'cnn_4layers_results', 0.0, 0.0, 0.0])
model_name
save_model_filename
save_parameters_file
seed
test_size
learning_rate
weight_decay
num_epochs
batch_size
Parent_DIR is =  /content/drive/MyDrive/PyTorch_BrainTumor
dict_values([PosixPath('/content/drive/MyDrive/PyTorch_BrainTumor'), 'vgg16_pretrained_false', 2, 4, 0.2, PosixPath('/content/drive/MyDrive/PyTorch_BrainTumor/data/train'), PosixPath('/content/drive/MyDrive/PyTorch_BrainTumor/data/test'), PosixPath('/content/drive/MyDrive/PyTorch_BrainTumor/data/predict'), 1e-05, 0.002, 50, 20, 'yes', 'final_model', '/content/drive/MyDrive/PyTorch_BrainTumor/final_model/vgg16_pretrained_false_Run48.pth', 'vgg16_pretrained_false_Run48', 0.0, 0.0, 0.0])
######### Done initializing parameters ##### 


######### Start data download step ##### 
######### End of the data download step ##### 
######### Start of data loader creation step ##### 
######### End of data loader creation step ##### 
######### Start of training step ##### 
Device is  cuda
/usr/local/lib/python3.10/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.
  warnings.warn(
/usr/local/lib/python3.10/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=None`.
  warnings.warn(msg)
VGG(
  (features): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
    (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): ReLU(inplace=True)
    (6): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (7): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (8): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (9): ReLU(inplace=True)
    (10): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (11): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (12): ReLU(inplace=True)
    (13): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (14): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (15): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (16): ReLU(inplace=True)
    (17): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (18): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (19): ReLU(inplace=True)
    (20): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (21): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (22): ReLU(inplace=True)
    (23): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (24): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (25): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (26): ReLU(inplace=True)
    (27): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (28): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (29): ReLU(inplace=True)
    (30): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (31): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (32): ReLU(inplace=True)
    (33): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (34): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (35): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (36): ReLU(inplace=True)
    (37): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (38): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (39): ReLU(inplace=True)
    (40): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (41): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (42): ReLU(inplace=True)
    (43): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  )
  (avgpool): AdaptiveAvgPool2d(output_size=(7, 7))
  (classifier): Sequential(
    (0): Linear(in_features=25088, out_features=4096, bias=True)
    (1): ReLU(inplace=True)
    (2): Dropout(p=0.5, inplace=False)
    (3): Linear(in_features=4096, out_features=4096, bias=True)
    (4): ReLU(inplace=True)
    (5): Dropout(p=0.5, inplace=False)
    (6): Linear(in_features=4096, out_features=2, bias=True)
  )
)
Size of train_loader= 48
End of epoch:  0 / 20 , training accuracy= 0.6779166666666665
End of epoch:  1 / 20 , training accuracy= 0.7187500000000001
End of epoch:  2 / 20 , training accuracy= 0.7566666666666665
End of epoch:  3 / 20 , training accuracy= 0.7620833333333333
End of epoch:  4 / 20 , training accuracy= 0.7791666666666667
End of epoch:  5 / 20 , training accuracy= 0.8095833333333338
End of epoch:  6 / 20 , training accuracy= 0.8349999999999999
End of epoch:  7 / 20 , training accuracy= 0.8645833333333335
End of epoch:  8 / 20 , training accuracy= 0.8654166666666666
End of epoch:  9 / 20 , training accuracy= 0.8904166666666669
End of epoch:  10 / 20 , training accuracy= 0.8979166666666664
End of epoch:  11 / 20 , training accuracy= 0.9029166666666667
End of epoch:  12 / 20 , training accuracy= 0.9033333333333333
End of epoch:  13 / 20 , training accuracy= 0.9108333333333335
End of epoch:  14 / 20 , training accuracy= 0.9241666666666668
End of epoch:  15 / 20 , training accuracy= 0.92875
End of epoch:  16 / 20 , training accuracy= 0.9391666666666668
End of epoch:  17 / 20 , training accuracy= 0.9354166666666665
End of epoch:  18 / 20 , training accuracy= 0.9508333333333333
End of epoch:  19 / 20 , training accuracy= 0.9537500000000002
: The validation loss =  0.004157264704505603 , accuracy= 0.9216666666666667
Saving the model into the file: /content/drive/MyDrive/PyTorch_BrainTumor/final_model/vgg16_pretrained_false_Run48.pth
######### End of training step ##### 
Amit: parent_dir
parent_dir : /content/drive/MyDrive/PyTorch_BrainTumor

model_name : vgg16_pretrained_false

num_classes : 2

seed : 4

test_size : 0.2

train_folder : /content/drive/MyDrive/PyTorch_BrainTumor/data/train

test_folder : /content/drive/MyDrive/PyTorch_BrainTumor/data/test

predict_folder : /content/drive/MyDrive/PyTorch_BrainTumor/data/predict

learning_rate : 1e-05

weight_decay : 0.002

batch_size : 50

num_epochs : 20

save_model_flag : yes

save_model_dir : final_model

save_model_filename : /content/drive/MyDrive/PyTorch_BrainTumor/final_model/vgg16_pretrained_false_Run48.pth

save_parameters_file : vgg16_pretrained_false_Run48

train_accuracy : 0.9537500000000002

test_val_loss : 0.004157264704505603

test_accuracy : 0.9216666666666667
