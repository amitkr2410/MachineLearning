/content/drive/MyDrive/PyTorch_BrainTumor/params.yaml


######### Start initializing parameters ##### 
dict_keys(['parent_dir', 'model_name', 'num_classes', 'seed', 'test_size', 'train_folder', 'test_folder', 'predict_folder', 'learning_rate', 'weight_decay', 'batch_size', 'num_epochs', 'save_model_flag', 'save_model_dir', 'save_model_filename', 'save_parameters_file', 'train_accuracy', 'test_val_loss', 'test_accuracy'])
dict_values([PosixPath('.'), 'cnn_4layers_custom', 2, 1, 0.2, PosixPath('data/train'), PosixPath('data/test'), PosixPath('data/predict'), 0.002, 0.2, 100, 2, 'yes', 'final_model', 'cnn_4layers_custom.pth', 'cnn_4layers_results', 0.0, 0.0, 0.0])
model_name
save_model_filename
save_parameters_file
seed
test_size
learning_rate
weight_decay
num_epochs
batch_size
Parent_DIR is =  /content/drive/MyDrive/PyTorch_BrainTumor
dict_values([PosixPath('/content/drive/MyDrive/PyTorch_BrainTumor'), 'vgg16_pretrained_false', 2, 4, 0.2, PosixPath('/content/drive/MyDrive/PyTorch_BrainTumor/data/train'), PosixPath('/content/drive/MyDrive/PyTorch_BrainTumor/data/test'), PosixPath('/content/drive/MyDrive/PyTorch_BrainTumor/data/predict'), 0.01, 0.002, 50, 20, 'yes', 'final_model', '/content/drive/MyDrive/PyTorch_BrainTumor/final_model/vgg16_pretrained_false_Run51.pth', 'vgg16_pretrained_false_Run51', 0.0, 0.0, 0.0])
######### Done initializing parameters ##### 


######### Start data download step ##### 
######### End of the data download step ##### 
######### Start of data loader creation step ##### 
######### End of data loader creation step ##### 
######### Start of training step ##### 
Device is  cuda
/usr/local/lib/python3.10/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.
  warnings.warn(
/usr/local/lib/python3.10/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=None`.
  warnings.warn(msg)
VGG(
  (features): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
    (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): ReLU(inplace=True)
    (6): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (7): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (8): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (9): ReLU(inplace=True)
    (10): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (11): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (12): ReLU(inplace=True)
    (13): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (14): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (15): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (16): ReLU(inplace=True)
    (17): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (18): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (19): ReLU(inplace=True)
    (20): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (21): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (22): ReLU(inplace=True)
    (23): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (24): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (25): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (26): ReLU(inplace=True)
    (27): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (28): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (29): ReLU(inplace=True)
    (30): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (31): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (32): ReLU(inplace=True)
    (33): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (34): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (35): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (36): ReLU(inplace=True)
    (37): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (38): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (39): ReLU(inplace=True)
    (40): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (41): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (42): ReLU(inplace=True)
    (43): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  )
  (avgpool): AdaptiveAvgPool2d(output_size=(7, 7))
  (classifier): Sequential(
    (0): Linear(in_features=25088, out_features=4096, bias=True)
    (1): ReLU(inplace=True)
    (2): Dropout(p=0.5, inplace=False)
    (3): Linear(in_features=4096, out_features=4096, bias=True)
    (4): ReLU(inplace=True)
    (5): Dropout(p=0.5, inplace=False)
    (6): Linear(in_features=4096, out_features=2, bias=True)
  )
)
Size of train_loader= 48
<class 'torch.Tensor'> 50  pred output= tensor([[-0.3535, -0.6150],
        [-0.0876, -0.5725],
        [-0.1800, -0.9010],
        [ 0.1371, -0.5163],
        [ 0.4510, -0.7017],
        [-0.5250,  0.3792],
        [-0.9106, -0.5597],
        [ 2.1001, -1.2448],
        [ 0.0857, -1.4446],
        [-0.0535, -0.5080],
        [-0.0512, -0.0155],
        [-0.4152, -0.4528],
        [-1.1099, -0.7757],
        [ 0.2086, -0.5311],
        [-0.3459, -1.1178],
        [ 0.3183, -0.2747],
        [ 0.3444, -0.8341],
        [-0.4800,  0.0962],
        [-0.1357, -0.9964],
        [ 0.2511, -1.1938],
        [ 1.2357,  0.5805],
        [ 0.7035, -0.3305],
        [-0.7749,  1.0585],
        [-0.4213, -0.5710],
        [-0.1764, -0.4109],
        [ 0.6604, -0.8538],
        [ 0.5129,  0.2640],
        [ 0.3562, -0.8649],
        [ 0.6274, -1.8865],
        [-0.4383, -1.2616],
        [ 1.6657, -0.3458],
        [ 0.2897, -1.8250],
        [-0.5866, -0.7482],
        [-0.2623, -1.0569],
        [ 1.2044, -0.8165],
        [ 0.7468, -0.1161],
        [ 0.4630,  0.2801],
        [ 0.8399, -1.0517],
        [ 0.1171, -1.1042],
        [ 1.6072,  0.1480],
        [ 0.6316, -0.4218],
        [ 0.3233, -0.6298],
        [-0.5835, -0.1332],
        [ 0.0895, -0.6517],
        [-1.1129, -1.6524],
        [ 0.1695, -0.3908],
        [ 2.0792, -0.4766],
        [-0.3142, -1.3208],
        [ 0.1306, -1.6985],
        [-0.3808, -1.4252]], device='cuda:0', grad_fn=<AddmmBackward0>)  
 pred class= tensor([0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
        0, 0], device='cuda:0')
i= 0 <class 'torch.Tensor'> 50  ground_truth= tensor([1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0,
        1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1,
        1, 1], device='cuda:0')
Batch:  0 / 48
<class 'torch.Tensor'> 50  pred output= tensor([[ -14701.3711,   14193.4834],
        [-103783.6172,   97803.2734],
        [ -13590.2148,   12986.5527],
        [ -14428.6279,   13647.7168],
        [ -18252.5879,   16445.0703],
        [ -14246.0000,   13889.1807],
        [ -49799.3555,   46198.2383],
        [ -12909.8760,   12516.8770],
        [ -13517.8965,   12946.5146],
        [ -13769.7422,   12757.7500],
        [ -53738.7227,   51524.4023],
        [ -12130.5479,   12066.4004],
        [ -18890.9082,   18478.5059],
        [ -13196.6689,   12702.1328],
        [ -14539.8379,   13799.3672],
        [ -24499.4844,   23965.2852],
        [ -11986.9062,   11622.6533],
        [ -13989.0205,   13381.0273],
        [ -12750.8086,   12872.2891],
        [ -16275.4043,   14982.1904],
        [ -13289.8350,   12923.9619],
        [ -14012.0088,   13482.0400],
        [ -12941.7715,   12348.8301],
        [ -12621.4297,   12306.4697],
        [ -45310.8359,   43340.8828],
        [ -26646.5137,   25709.8633],
        [ -51351.4453,   49706.0273],
        [ -13696.4258,   13294.3994],
        [ -12735.4766,   11747.5645],
        [ -51479.0195,   50041.1836],
        [ -12799.4395,   12655.0186],
        [ -12551.4111,   11693.1797],
        [ -22211.8066,   21032.3418],
        [ -13128.1855,   11980.4619],
        [ -86888.3672,   83239.2656],
        [ -14007.8203,   12756.0400],
        [ -13603.8994,   13001.8457],
        [ -13065.3750,   12368.4043],
        [ -50171.5312,   44569.4492],
        [ -13293.9658,   12704.6934],
        [ -12930.1133,   12400.4600],
        [ -24341.9961,   23303.4570],
        [ -12543.8115,   11570.4365],
        [ -12437.7646,   11763.0615],
        [ -12658.5889,   12237.3672],
        [ -85404.8516,   85183.0703],
        [ -12344.4238,   11588.0039],
        [ -13257.3682,   12287.5039],
        [ -16807.3340,   16099.0811],
        [ -41329.6367,   38719.5938]], device='cuda:0',
       grad_fn=<AddmmBackward0>)  
 pred class= tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1], device='cuda:0')
i= 1 <class 'torch.Tensor'> 50  ground_truth= tensor([0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1,
        0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0,
        1, 1], device='cuda:0')
Batch:  1 / 48
<class 'torch.Tensor'> 50  pred output= tensor([[  331.8255,  -422.4292],
        [  385.5752,  -446.9456],
        [  311.7032,  -338.5353],
        [  376.2198,  -381.3280],
        [  384.8502,  -421.6159],
        [  283.6331,  -387.3840],
        [  440.5916,  -482.6494],
        [ 1389.4506, -1665.6033],
        [ 3489.4573, -4027.4780],
        [  306.5348,  -346.3628],
        [  336.2931,  -408.7135],
        [  418.7150,  -492.6689],
        [  332.3499,  -373.4471],
        [  361.0133,  -441.1408],
        [  281.8829,  -368.4356],
        [  306.7445,  -361.7586],
        [  397.3445,  -458.9040],
        [  317.7756,  -350.0132],
        [  537.7182,  -621.5193],
        [  269.1084,  -329.5508],
        [  722.0704,  -908.1797],
        [  310.9027,  -362.3250],
        [  350.3033,  -396.7260],
        [  347.0504,  -426.7014],
        [  421.3202,  -520.7603],
        [  730.6335,  -848.3093],
        [  375.7702,  -417.9640],
        [ 1582.4368, -2026.7902],
        [  308.2772,  -358.0135],
        [  329.9268,  -407.6350],
        [  373.0538,  -427.7013],
        [ 8063.4922, -9499.6748],
        [  328.7403,  -389.4298],
        [  348.8903,  -428.5673],
        [  363.1157,  -396.2051],
        [  363.3363,  -422.6500],
        [  309.6195,  -371.7034],
        [ 1847.2725, -2134.1541],
        [  310.6941,  -417.1203],
        [ 2967.0083, -3813.1560],
        [ 1110.9976, -1219.5946],
        [  448.3658,  -544.1673],
        [  608.7867,  -729.2061],
        [  318.4800,  -328.6286],
        [  314.0735,  -364.4957],
        [ 3481.1479, -3947.9187],
        [  403.7235,  -451.1710],
        [  332.8046,  -397.1575],
        [  352.4810,  -420.8516],
        [  374.3481,  -426.9393]], device='cuda:0', grad_fn=<AddmmBackward0>)  
 pred class= tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0], device='cuda:0')
i= 2 <class 'torch.Tensor'> 50  ground_truth= tensor([0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0,
        0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0,
        0, 0], device='cuda:0')
Batch:  2 / 48


parent_dir : /content/drive/MyDrive/PyTorch_BrainTumor
model_name : vgg16_pretrained_false
num_classes : 2
seed : 4
test_size : 0.2
train_folder : /content/drive/MyDrive/PyTorch_BrainTumor/data/train
test_folder : /content/drive/MyDrive/PyTorch_BrainTumor/data/test
predict_folder : /content/drive/MyDrive/PyTorch_BrainTumor/data/predict
learning_rate : 0.01
weight_decay : 0.002
batch_size : 50
num_epochs : 20
save_model_flag : yes
save_model_dir : final_model
save_model_filename : /content/drive/MyDrive/PyTorch_BrainTumor/final_model/vgg16_pretrained_false_Run51.pth
save_parameters_file : vgg16_pretrained_false_Run51
train_accuracy : 0.5393548387096773
test_val_loss : 0.015302472511927288
test_accuracy : 0.6816666666666668

